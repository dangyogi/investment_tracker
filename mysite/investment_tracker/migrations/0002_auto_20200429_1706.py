# Generated by Django 3.0.5 on 2020-04-29 17:06

from datetime import date

from django.db import migrations


def with_create(model_name):
    def wrapper(fn):
        def surrogate(apps, schema_editor):
            model = apps.get_model('investment_tracker', model_name)
            db_alias = schema_editor.connection.alias
            def create(**fields):
                r'''Returns assigned id.
                '''
                row = model(**fields)
                row.save(using=db_alias)
                return row

            # Hack to pass apps and db_alias to `fn`, in case it needs it...
            create.apps = apps
            create.db_alias = db_alias

            fn(create)
        return surrogate
    return wrapper


@with_create('User')
def insert_users(create):
    global Bruce_id, Marilyn_id
    Bruce_id = create(name='Bruce').id
    Marilyn_id = create(name='Marilyn').id
    print()  # terminate line left hanging in migrate output
    print("Bruce_id", Bruce_id)


def insert_funds(apps, schema_editor):
    Fund = apps.get_model('investment_tracker', 'Fund')
    db_alias = schema_editor.connection.alias
    Fund.objects.using(db_alias).bulk_create([
        Fund(ticker='VMFXX', name='Vanguard Federal Money Market Fund'),
        Fund(ticker='BLV', name='Vanguard Long Term Bond ETF'),
        Fund(ticker='BIV', name='Vanguard Intermediate Term Bond ETF'),
        Fund(ticker='BSV', name='Vanguard Short Term Bond ETF'),
        Fund(ticker='FLIN', name='Franklin FTSE India ETF'),
        Fund(ticker='FLJP', name='Franklin Templeton FTSE Japan ETF'),
        Fund(ticker='VGK', name='Vanguard FTSE Europe ETF'),
        Fund(ticker='VTV', name='Vanguard Large Cap Value ETF'),
        Fund(ticker='VUG', name='Vanguard Large Cap Growth ETF'),
        Fund(ticker='VOE', name='Vanguard Mid Cap Value ETF'),
        Fund(ticker='VOT', name='Vanguard Mid Cap Growth ETF'),
        Fund(ticker='VBR', name='Vanguard Small Cap Value ETF'),
        Fund(ticker='VBK', name='Vanguard Small Cap Growth ETF'),
    ])


Categories = {}  # keyed by name

@with_create('Category')
def insert_categories(create):
    cat_fund = create.apps.get_model('investment_tracker', 'CategoryFund')
    cat_link = create.apps.get_model('investment_tracker', 'CategoryLink')
    db_alias = create.db_alias

    # The Categories marked with an '*' are shared by all users.
    tree = ('*Account',
             ('*Cash', 'VMFXX'), 
             ('*Investments',
               ('*Bonds',
                 ('Short Term Bonds', 'BSV'),
                 ('Intermediate Term Bonds', 'BIV'),
                 ('Long Term Bonds', 'BLV')),
               ('*Stocks',
                 ('*Foreign',
                   ('India', 'FLIN'),
                   ('Japan', 'FLJP'),
                   ('Europe', 'VGK')),
                 ('*US',
                   ('*Large Cap',
                     ('Large Cap Value', 'VTV'),
                     ('Large Cap Growth', 'VUG')),
                   ('*Mid Cap',
                     ('Mid Cap Value', 'VOE'),
                     ('Mid Cap Growth', 'VOT')),
                   ('*Small Cap',
                     ('Small Cap Value', 'VBR'),
                     ('Small Cap Growth', 'VBK'))))))
    def create_cat(tree):
        name, *rest = tree

        def create_row():
            nonlocal name

            shared = False
            if name.startswith('*'):
                shared = True
                name = name[1:]
            cat = create(name=name)
            Categories[name] = cat.id
            return cat, shared

        if isinstance(rest[0], str):
            cat, shared = create_row()
            cat_fund(category=cat, fund_id=rest[0], owner_id=Bruce_id) \
              .save(using=create.db_alias)
        else:
            cat, shared = create_row()
            for order, child_tree in enumerate(rest, 1):
                child, child_shared = create_cat(child_tree)
                cat_link(parent=cat, child=child, order=order * 10,
                         owner_id=(None if child_shared else 1)) \
                  .save(using=db_alias)
        return cat, shared
    create_cat(tree)
    print("Account", Categories['Account'])


@with_create('Account')
def insert_accounts(create):
    global Bruce_Traditional_IRA_id, Bruce_Roth_IRA_id, Bruce_Brokerage_id
    rebalance_date = date(2020, 3, 19)

    Bruce_Traditional_IRA_id = create(owner_id=Bruce_id, name='Traditional IRA',
                                      account_number='53f3fff1e1d95da28964fdd22fd09007550c91b335c3ed577efb519c134e915f',
                                      category_id=Categories['Account'],
                                      rebalance_date=rebalance_date).id
    Bruce_Roth_IRA_id = create(owner_id=Bruce_id, name='Roth IRA',
                               account_number='b6f31f1dba641b2b580c5eace6c4417e5d9ec5d935e2071c44caf8aca71d43ef',
                               category_id=Categories['Account'],
                               rebalance_date=rebalance_date).id
    Bruce_Brokerage_id = create(owner_id=Bruce_id, name='Brokerage',
                                account_number='9fd166a8b3e2e4bf4475e78db86c4e4494f52376f170622e87ee2b6cd1a2a124',
                                category_id=Categories['Account'],
                                rebalance_date=rebalance_date).id
    create(owner_id=Marilyn_id, name='Traditional IRA',
           account_number='9d6531b598bd244c9ee12d4577bf97b4e491ea7a61adb88e313fd2d560de7f44')
    create(owner_id=Marilyn_id, name='Roth IRA',
           account_number='0a55db0ec624aaa337914d22b1de45e99e5f8a49d4d36562aaa15d5d49c8c2e7')
    print("Bruce_Traditional_IRA_id", Bruce_Traditional_IRA_id)
    print("Bruce_Roth_IRA_id", Bruce_Roth_IRA_id)
    print("Bruce_Brokerage_id", Bruce_Brokerage_id)


@with_create('Plan')
def insert_plans(create):
    def create2(cat, account, **rest):
        if account is None:
            rest['owner_id'] = Bruce_id
        else:
            rest['account_id'] = account
        return create(category_id=Categories[cat], **rest)
    def create_default(cat, account=None):
        return create2(cat, account)
    def create_amount(cat, amount, account=None):
        return create2(cat, account, amount=amount)
    def create_percent(cat, percent, account=None):
        return create2(cat, account, percent=percent)
    def create_fraction(cat, numerator, denominator, account=None):
        return create2(cat, account,
                       numerator=numerator, denominator=denominator)

    create_default('Account')

    create_amount('Cash', 0.0, Bruce_Traditional_IRA_id)
    create_amount('Cash', 0.0, Bruce_Roth_IRA_id)
    create_amount('Cash', 8000.0, Bruce_Brokerage_id)

    create_default('Investments')

    create_percent('Bonds', 0.30, Bruce_Traditional_IRA_id)
    create_percent('Bonds', 0.10, Bruce_Roth_IRA_id)
    create_percent('Bonds', 0.40, Bruce_Brokerage_id)

    create_fraction('Short Term Bonds', 1, 3)
    create_percent('Intermediate Term Bonds', 0.0)
    create_default('Long Term Bonds')

    create_default('Stocks')
    create_percent('Foreign', 0.25)
    create_percent('India', 0.40)
    create_percent('Japan', 0.40)
    create_default('Europe')

    create_default('US')
    create_fraction('Large Cap', 1, 3)
    create_fraction('Mid Cap', 1, 3)
    create_default('Small Cap')
    create_percent('Large Cap Value', 0.0)
    create_default('Large Cap Growth')
    create_percent('Mid Cap Value', 0.5)
    create_default('Mid Cap Growth')
    create_percent('Small Cap Value', 0.5)
    create_default('Small Cap Growth')


class Migration(migrations.Migration):

    dependencies = [
        ('investment_tracker', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(insert_users),
        migrations.RunPython(insert_funds),
        migrations.RunPython(insert_categories),
        migrations.RunPython(insert_accounts),
        migrations.RunPython(insert_plans),
    ]

